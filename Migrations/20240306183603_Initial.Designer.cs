// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PrinterManagerServer.Database;

#nullable disable

namespace PrinterManagerServer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240306183603_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("PrinterManagerServer.Types.Printer", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ModelGuid")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("ModelGuid");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("PrinterManagerServer.Types.PrinterModel", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("PrintVolumeHeightMm")
                        .HasColumnType("REAL");

                    b.Property<float>("PrintVolumeLengthMm")
                        .HasColumnType("REAL");

                    b.Property<float>("PrintVolumeWidthMm")
                        .HasColumnType("REAL");

                    b.Property<DateTimeOffset>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("PrinterModels");
                });

            modelBuilder.Entity("PrinterManagerServer.Types.Token", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TokenType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.HasIndex("UserGuid");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("PrinterManagerServer.Types.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PrinterManagerServer.Types.Printer", b =>
                {
                    b.HasOne("PrinterManagerServer.Types.PrinterModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("PrinterManagerServer.Types.Token", b =>
                {
                    b.HasOne("PrinterManagerServer.Types.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
